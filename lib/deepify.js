!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.deepify=t():e.deepify=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=50)}({15:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.emptyArrayRegxp=/\[\]$/,t.indexArrayRegxp=/\[\d+\]$/,t.indexArrayRefRegxp=/\[\d+\]\[\]$/,t.numberRegex=/^\d+$/,t.arrayBrackets=/[\[\]]/gi},40:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getIndexFromPropName=void 0;var n=r(15);t.getIndexFromPropName=function(e){return parseInt([].concat(function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}(e.match(n.indexArrayRegxp)))[0].replace(n.arrayBrackets,""),10)}},43:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setProperty=t.deepCopy=t.isMutable=void 0;var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=r(15),i=r(40);function u(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}t.isMutable=function(e,t){return"boolean"==typeof e?e:!(!t||"boolean"!=typeof t.mutate)&&t.mutate},t.deepCopy=function(e){return null!==e&&void 0!==e&&"object"===(void 0===e?"undefined":n(e))?JSON.parse(JSON.stringify(e)):null},t.setProperty=function(e,t,r){if(!("string"==typeof t&&t.length>0))throw"propertyName must be a string and lenght > 0";var n=t.split("."),a=n.length,f=e;n.forEach(function(e,t){if(t+1===a)if(e.match(o.emptyArrayRegxp))f=function(e,t,r){var n=Object.assign(e),i=t.replace(o.emptyArrayRegxp,"");return n[i]=[],void 0!==r&&n[i].push(r),n=n[i]}(f,e,r);else if(e.match(o.indexArrayRegxp))f=function(e,t,r){var n=Object.assign(e),u=(0,i.getIndexFromPropName)(t),a=t.replace(o.indexArrayRegxp,"");return n[a]instanceof Array?u>n[a].lenght?n[a].push(r):n[a].splice(u,0,r):n[a]=[r],n}(f,e,r);else if(f instanceof Array){var n=u({},e,r);f.push(n)}else f[e]=r;else if(f&&f.hasOwnProperty(e))f=f[e];else if(e.match(o.emptyArrayRegxp))f=function(e,t){var r=Object.assign(e),n=t.replace(o.emptyArrayRegxp,"");return r[n]=[],r=r[n]}(f,e);else if(e.match(o.indexArrayRegxp))f=function(e,t){var r=Object.assign(e),n=(0,i.getIndexFromPropName)(t),u=t.replace(o.indexArrayRegxp,""),a={};if(r[u]instanceof Array){if(n>r[u].lenght)return r[u].push(a),a;var f=r[u][n];return void 0!==f?f:(e[u].splice(n,0,a),a)}return r[u]=[a],a}(f,e);else if(f instanceof Array){var p=u({},e,{});f.push(p),f=p[e]}else f[e]={},f=f[e]})}},47:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getProperty=t.getArrayRef=t.getArrayAtPosition=void 0;var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=r(15),i=r(40),u=t.getArrayAtPosition=function(e,t){var r=(0,i.getIndexFromPropName)(t),n=t.replace(o.indexArrayRegxp,"");if(e[n]instanceof Array&&e[n].length>0&&r<=e[n].length)return e[n][r]},a=t.getArrayRef=function(e,t){var r=t.replace(o.emptyArrayRegxp,"");return u(e,r)};t.getProperty=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";if(null===e||void 0===e)return null;var r=t.split(".");if("object"===(void 0===e?"undefined":n(e))&&e instanceof Array==!1){var i=e;return r.forEach(function(e){i=void 0!==i&&!1===i.hasOwnProperty(e)&&e.match(o.indexArrayRegxp)?u(i,e):void 0!==i&&e.match(o.indexArrayRefRegxp)?a(i,e):void 0!==i&&i.hasOwnProperty(e)?i[e]:void 0}),i}}},48:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.deepifyGet=void 0;var n=r(47);t.deepifyGet=function(e,t){return(0,n.getProperty)(e,t)}},49:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.deepifySet=void 0;var n=r(43),o={mutate:!1,configure:function(e){this.mutate=e}};t.deepifySet=function(e,t,r,i){if("string"==typeof t&&t.length>0){var u=(0,n.isMutable)(i,o)?e:(0,n.deepCopy)(e);return null!==u&&(0,n.setProperty)(u,t,r),u}return e}},50:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.deepifyGet=t.deepifySet=void 0;var n=r(49),o=r(48);t.deepifySet=n.deepifySet,t.deepifyGet=o.deepifyGet}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,